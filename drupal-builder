#!/usr/bin/env bash

# Authors:
# - Sergey Bondarenko, <sb@firstvector.org>
#
# License:
# - MIT, <https://raw.githubusercontent.com/BR0kEN-/drupal-build/master/LICENSE>
#
# Project:
# - GitHub, <https://github.com/BR0kEN-/drupal-build>

readonly bash_needed_version=3
readonly bash_major_version=${BASH_VERSION%%[^0-9]*}

y=false
tput_exist=true

silent_execution()
{
    ${1} > /dev/null 2>&1
}

silent_execution "tput -V"

if [ $? -gt 0 ]; then
    tput_exist=false
else
    readonly error=`tput setaf 1`
    readonly success=`tput setaf 2`
    readonly warning=`tput setaf 3`
    readonly status=`tput setaf 4`
    readonly normal=`tput sgr0`
fi

# Print message on the screen.
#
# @param string $message
#   Message which will be printed.
# @param string [$status=success]
#   Type of a message. Allowed values are: "error", "success", "warning"
#   and "normal". If "error" type was specified then script stop execution
#   immediately.
# @param bool [$just_coorize=false]
#   Just colorize the message if set to "true" (only if "tput" exist).
status_message()
{
    if [ -n "${1}" ]; then
        local color="success"

        if [ "${2}" ]; then
            color=${2}
        fi

        if ${tput_exist}; then
            if [ -z "${3}" ]; then
                printf "%*s\r%s\n" "$((`tput cols`+${#color}+2))" "${!color}[${color}]${normal}" "${1}"
            else
                echo "${!color}${1}${normal}"
            fi
        else
            if [ -z "${3}" ]; then
                echo "${1} [${color}]"
            else
                echo "${1}"
            fi
        fi

        if [ "${color}" == "error" ]; then
            exit
        fi
    fi
}

# Check existence of utility in global scope.
#
# @param string $command
#   An argument should looks like: "git --version:Git". Part, located before
#   colon, must be the name of executable programm, after - human-readable name
#   of programm that will be printed as message part if programm does not exist.
chech_global_utility()
{
    silent_execution "${1%:*}"
    catch_last_error "${1#*:} is not installed!"
}

catch_last_error()
{
    if [ $? -gt 0 ]; then
        status_message "${1}" error
    fi
}

# Check Bash version.
if [ "${bash_major_version}" -lt "${bash_needed_version}" ]; then
    status_message "Sorry, but bash version should be more or equal of ${bash_needed_version}!" error
fi

chech_global_utility "drush:Drush"

# User interaction. Valid response options: "y" or "Y" and "n" or "N". If
# a user gives a negative answer (n or N), then script execution will be
# stopped immediately, positive (y or Y) - scenario will do what the user
# has given a consent. In another cases (any other text) script will be
# wait one of the correct answers.
#
# @param string $1
#   An interrogative message.
ask()
{
    if [[ -n "${1}" ]]; then
        local answer;
        local message="${1} [Y/n]: ";

        if ${y}; then
            status_message "${message}y" status true
            return 0
        fi

        while true; do
            read -p "`status_message "${1} [Y/n]: " warning true`" answer
            case ${answer} in
                [Yy])
                    return 0
                ;;
                [Nn])
                    return 1
                ;;
                *)
            esac
        done
    fi
}

user_input()
{
    if [[ -n "${1}" ]]; then
        local answer;

        while true; do
            read -p "`status_message "${1}: " warning true`" answer

            if [ ! -z "${answer}" ]; then
                echo ${answer}
                break
            fi
        done
    fi
}

drush_cc()
{
    silent_execution "drush cc ${1}"
}

# Replace string in file.
#
# @param string $find
# @param string $replace
# @param string $file
replace_in_file()
{
    if [ "$#" -ge 3 ]; then
        if [ -f "${3}" ]; then
            sed "s|${1}|${2}|g" ${3} > ${3}.tmp
            mv ${3}.tmp ${3}
        else
            status_message "The `pwd`/$3 does not exist." error
        fi
    else
        status_message "Was passed $# arguments while expected 3." error
    fi
}

# Retrieve an absolute path of symlink (recursively).
#
# @param string $symlink
get_full_path()
{
    local link=${1}
    local cd=${link}

    while true; do
        if [ -L "${link}" ]; then
            cd=${link}
            link=`readlink ${link}`
        else
            for var in cd link; do
                if [ -f "${!var}" ]; then
                    declare "${var}"=${!var%/*}
                fi

                silent_execution "cd ${!var}"
            done

            echo `pwd`
            break
        fi
    done
}

# @param string $1
#   Path to file.
# @param string $2
#   Project name ("profile" variables).
# @param string $3
#   Hook name ("preinstall" or "postinstall").
_hook_installation()
{
    local file=${2}.${3}
    local full_path=${1}/${file}

    if [[ -f ${full_path} && `ask "Are you want to allow affect the \"${file}\" for installation process?"` ]]; then
        . ${full_path}
    fi
}

readonly _work_dir_path=`get_full_path ${0}`
_internal_command="drupal"

. ${_work_dir_path}/variables.sh

readonly _space_placeholder="!+"
readonly _arg_placeholder=",+"

args=${@}
# Separate arguments by placeholders. This is necessary for leaving spaces untouchable.
args=${args//--/${_arg_placeholder}}
# Replace spaces by placeholders. This is necessary for keeping the text in the loop.
args=${args// /${_space_placeholder}}

# Split arguments by special placeholder and get the value like "param=value".
for i in ${args//${_arg_placeholder}/ }; do
    # Determining variable name.
    var=${i%=*}
    # Determining variable value.
    val=${i#*=}
    # Restore spaces for argument value.
    val=${val//${_space_placeholder}/ }

    # If parameter has no value, then set it to "true". For example: "--no-make".
    if [[ ${var} == ${val} ]]; then
        val=true
    fi

    # Replace all dashes by underscores in variable name.
    var=${var//-/_}

    declare "${var}"="${val//[[:blank:]]/}" > /dev/null 2>&1
done

# Allow to run commands defined as parameters.
for override in `ls ${_work_dir_path}/commands`; do
    override=${override//.*/}

    if [[ -n "${!override}" && -f "${_work_dir_path}/commands/${override}.sh" ]]; then
        _internal_command=${override}
        break
    fi
done

. ${_work_dir_path}/commands/${_internal_command}.sh
